
upstream tor {
        server  127.0.0.1:9060;
        server  127.0.0.1:9070;
}



#dredzone
access_by_lua_no_postpone on;
limit_req_zone $proxy_protocol_addr zone=circuits:50m rate=6r/s;
limit_req_zone $cookie_dcap zone=capcookie:50m rate=6r/s;


#include  /etc/nginx/stream.conf;


server {
	# server name (vhost)
	server_name test.ru;

	# HTTP listen

	listen 0.0.0.0:8080 default_server;

	index index.php index.html index.htm;

	# custom config
	include /opt/bunkerweb/configs/server-http/*.conf;

	# reason variable
	set $reason '';

	# include LUA files
	include /etc/nginx/access-lua.conf;
	include /etc/nginx/log-lua.conf;
	
	# include config files
	include /etc/nginx/server-http/*.conf;



    #what do do when rate limit is triggered, blacklist the cookie (if exists) and kill circuit
        location @ratelimit {
               #error_log /var/log/nginx/front_error.log;
               access_by_lua_block {
               local pa = "no_proxy"
               if ngx.var.proxy_protocol_addr ~= nil then
                        pa = ngx.var.proxy_protocol_addr
               end
               local cook = require "resty.cookie"
               local cookie, err = cook:new()
               if not cookie then
                       ngx.log(ngx.ERR, err)
                       return
               end
               local field, err = cookie:get("dcap")
               if field then

                       local blocked_cookies = ngx.shared.blocked_cookies
                       blocked_cookies:set(field, 1, 3600)
               end

               ngx.log(ngx.ERR, "Rate limited " .. ngx.var.remote_addr .. "|" .. pa)

               if pa ~= "no_proxy" then
                        local ok, err = ngx.timer.at(0, kill_circuit, ngx.var.remote_addr, ngx.var.proxy_protocol_addr)
                        if not ok then
                               ngx.log(ngx.ERR, "failed to create timer: ", err)
                        return
                        end
               end
               ngx.exit(444)
               }
        }

}
